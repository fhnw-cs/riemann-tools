#!/usr/bin/env ruby

# Reports the status of systemd units to riemann.

require File.expand_path('../../lib/riemann/tools', __FILE__)

class Riemann::Tools::Systemd
  include Riemann::Tools

  opt :units, "A list of systemd units to check.", :type => :strings, :default => []

  def initialize
    @limits = {
      :cpu => {:critical => opts[:cpu_critical], :warning => opts[:cpu_warning]},
      :disk => {:critical => opts[:disk_critical], :warning => opts[:disk_warning]},
      :load => {:critical => opts[:load_critical], :warning => opts[:load_warning]},
      :memory => {:critical => opts[:memory_critical], :warning => opts[:memory_warning]}
    }
    

    opts[:checks].each do |check|
      case check
      when "disk"
        @disk_enabled = true
      when "load"
        @load_enabled = true
      when "cpu"
        @cpu_enabled = true
      when "memory"
        @memory_enabled = true
      end
    end
  end

  def alert(service, state, metric, description)
    report(
      :service => service.to_s,
      :state => state.to_s,
      :metric => metric.to_f,
      :description => description
    )
  end

  def report_pct(service, fraction, report)
    if fraction
      if fraction > @limits[service][:critical]
        alert service, :critical, fraction, "#{sprintf("%.2f", fraction * 100)}% #{report}"
      elsif fraction > @limits[service][:warning]
        alert service, :warning, fraction, "#{sprintf("%.2f", fraction * 100)}% #{report}"
      else
        alert service, :ok, fraction, "#{sprintf("%.2f", fraction * 100)}% #{report}"
      end
    end
  end

  def linux_cpu
    new = File.read('/proc/stat')
    unless new[/cpu\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/]
      alert 'cpu', :unknown, nil, "/proc/stat doesn't include a CPU line"
      return false
    end
    u2, n2, s2, i2 = [$1, $2, $3, $4].map { |e| e.to_i }

    if @old_cpu
      u1, n1, s1, i1 = @old_cpu

      used = (u2+n2+s2) - (u1+n1+s1)
      total = used + i2-i1
      fraction = used.to_f / total

      report_pct :cpu, fraction, "user+nice+system\n\n#{`ps -eo pcpu,pid,comm | sort -nrb -k1 | head -10`.chomp}"
    end

    @old_cpu = [u2, n2, s2, i2]
  end

  def linux_load
    load = File.read('/proc/loadavg').split(/\s+/)[0].to_f / @cores
    if load > @limits[:load][:critical]
      alert "load", :critical, load, "1-minute load average/core is #{load}"
    elsif load > @limits[:load][:warning]
      alert "load", :warning, load, "1-minute load average/core is #{load}"
    else
      alert "load", :ok, load, "1-minute load average/core is #{load}"
    end
  end

  def linux_memory
    m = File.read('/proc/meminfo').split(/\n/).inject({}) { |info, line|
      x = line.split(/:?\s+/)
      # Assume kB...
      info[x[0]] = x[1].to_i
      info
    }

    free = m['MemFree'].to_i + m['Buffers'].to_i + m['Cached'].to_i
    total = m['MemTotal'].to_i
    fraction = 1 - (free.to_f / total)

    report_pct :memory, fraction, "used\n\n#{`ps -eo pmem,pid,comm | sort -nrb -k1 | head -10`.chomp}"
  end

  

  def df
    case @ostype
    when 'darwin', 'freebsd', 'openbsd'
      `df -P -t noiso9660`
    when 'sunos'
      `df -P` # Is there a good way to exlude iso9660 here?
    else
      `df -P --exclude-type=iso9660`
    end
  end

  def disk
    df.split(/\n/).each do |r|
      f = r.split(/\s+/)
      next if f[0] == 'Filesystem'
      next unless f[0] =~ /\// # Needs at least one slash in the mount path

      # Calculate capacity
      x = f[4].to_f/100

      if x > @limits[:disk][:critical]
        alert "disk #{f[5]}", :critical, x, "#{f[4]} used"
      elsif x > @limits[:disk][:warning]
        alert "disk #{f[5]}", :warning, x, "#{f[4]} used"
      else
        alert "disk #{f[5]}", :ok, x, "#{f[4]} used"
      end
    end
  end

  def tick
    if @cpu_enabled
      @cpu.call
    end
    if @memory_enabled
      @memory.call
    end
    if @disk_enabled
      @disk.call
    end
    if @load_enabled
      @load.call
    end
  end
  
  def systemd_check(unit)
    `systemctl show -p SubState`
  end
end

Riemann::Tools::Systemd.run
